package site.conghucai.leetcode.problem.middle;

// 134. 加油站
// 在一条环路上有 n 个加油站，其中第 i 个加油站有汽油 gas[i] 升。

// 你有一辆油箱容量无限的的汽车，从第 i 个加油站开往第 i+1 个加油站需要消耗汽油 cost[i] 升。你从其中的一个加油站出发，开始时油箱为空。

// 给定两个整数数组 gas 和 cost ，如果你可以绕环路行驶一周，则返回出发时加油站的编号，否则返回 -1 。如果存在解，则 保证 它是 唯一 的。

// 示例 1:
// 输入: gas = [1,2,3,4,5], cost = [3,4,5,1,2]
// 输出: 3
// 解释:
// 从 3 号加油站(索引为 3 处)出发，可获得 4 升汽油。此时油箱有 = 0 + 4 = 4 升汽油
// 开往 4 号加油站，此时油箱有 4 - 1 + 5 = 8 升汽油
// 开往 0 号加油站，此时油箱有 8 - 2 + 1 = 7 升汽油
// 开往 1 号加油站，此时油箱有 7 - 3 + 2 = 6 升汽油
// 开往 2 号加油站，此时油箱有 6 - 4 + 3 = 5 升汽油
// 开往 3 号加油站，你需要消耗 5 升汽油，正好足够你返回到 3 号加油站。
// 因此，3 可为起始索引。
public class Solution134 {
    public int canCompleteCircuit(int[] gas, int[] cost) {
        int n = gas.length;

        int cap = 0;
        for (int i = 0; i < n; i++) {
            cap = gas[i];

            int j = i;
            while (cap >= cost[j]) {
                cap -= cost[j];
                j = (j + 1) % n; // 开到下一站

                if (i == j) {
                    return i;
                }

                cap += gas[j]; // 加上本站的油继续向前开
            }

            // 执行到这 说明i最远走到了j，但是走不到j+1。
            // 说明：i - j之间的所有点都走不到j+1。那么这些点自然不可能是起点。（反证法即可证明）
            // 跳过这些点即可。
            if (j < i) { // j跳到i前面，说明：i - n-1之间都没有正确答案，而0-i-1已经遍历过了，因此不可能有正确答案。
                return -1; // 防止走老路！
            }

            i = j; // 下次循环从j+1作为起点开始尝试。
        }

        return -1;
    }
}
